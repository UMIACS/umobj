#!/usr/bin/env python

import boto
from boto.s3.acl import ACL
import sys
import logging

from umobj.utils import umobj_logging, umobj_init_keyboard_interrupt, \
    umobj_get_bucket_key_pair_from_string
from umobj.obj import Obj
from umobj.acl import acl_pairs, split_acl
from umobj.options import umobj_parser


if __name__ == "__main__":
    umobj_init_keyboard_interrupt()

    description = 'Change Object - ' + \
                  'Modify Access Control lists for a set of buckets and/or keys'
    description_epilog = '''  POLICY      - username:ACL where ACL is one of
                FULL_CONTROL, READ, WRITE, READ_ACL, WRITE_ACL'''
    parser = umobj_parser(description=description,
                          description_epilog=description_epilog)
    parser.add_recursive(help='Recursively apply ACL to keys')
    parser.add_mode(choices=['add', 'remove', 'clear'])
    parser.add_policy()
    parser.add_s3path(number=1)
    args = parser.parse_args()
    ## setup logging
    if args.debug:
        logging_level = logging.DEBUG
    elif args.verbose:
        logging_level = logging.INFO
    else:
        logging_level = logging.WARNING
    umobj_logging(logging_level)

    logging.info("Running %s" % sys.argv)

    if args.mode is None:
        logging.error('Please provide a mode.')
        parser.print_help()
        sys.exit()

    if args.policies is None:
        logging.error('One or more policy ACL is required.')
        parser.print_help()
        sys.exit(1)

    if not Obj.connect(host=args.host,
                       port=args.port,
                       access_key=args.access_key,
                       secret_key=args.secret_key):
        logging.error('Unable to contact object store.')
        sys.exit(1)

    if len(args) == 0:
        parser.print_help()
        sys.exit(1)

    for bucket_name in args:
        bucket_name, key_prefix_name = \
            umobj_get_bucket_key_pair_from_string(bucket_name)
        try:
            bucket = Obj.conn.get_bucket(bucket_name)
        except boto.exception.S3ResponseError, e:
            logging.error("Can not access bucket %s, %s." %
                          (bucket_name, e.error_code))
            continue

        ## we use the bucket policy as a starting point
        policy = bucket.get_acl()
        logging.info('Current ACL Policy: %s' %
                     ', '.join(acl_pairs(policy.acl)))

        if args.mode == 'add':
            for p in args.policies:
                u, g = split_acl(p)
                policy.acl.add_user_grant(g, u)
        elif args.mode == 'remove':
            grants = []
            for grant in policy.acl.grants:
                for p in args.policies:
                    u, g = split_acl(p)
                    if grant.permission != g  or grant.id != u:
                        grants.append(grant)
            policy.acl.grants = grants
        elif args.mode == 'clear':
            acl = ACL()
            print args.policies
            for p in args.policies:
                u, g = split_acl(p)
                acl.add_user_grant(g, u)
            policy.acl = acl

        logging.info('ACL Policy to be applied: %s' %
                     ', '.join(acl_pairs(policy.acl)))

        if key_prefix_name:
            for key in bucket.list(prefix=key_prefix_name):
                try:
                    logging.info("Applying ACL to %s:%s" % (bucket.name,
                                                            key.name))
                    key.set_acl(policy)
                except boto.exception.S3ResponseError:
                    pass
        else:
            logging.info("Applying ACL to bucket %s." % bucket.name)
            try:
                bucket.set_acl(policy)
            except boto.exception.S3ResponseError:
                logging.warning('Unable to set bucket ACL %s' %
                                ', '.join(acl_pairs(policy.acl)))
            if args.recursive:
                for key in bucket.get_all_keys():
                    try:
                        logging.info("Applying ACL to %s:%s" % (bucket.name,
                                                                key.name))
                        key.set_acl(policy)
                    except boto.exception.S3ResponseError:
                        pass
