#!/usr/bin/env python

import boto
from boto.s3.acl import ACL
import sys
import logging

from umobj.utils import umobj_logging, umobj_init_keyboard_interrupt, \
    umobj_get_bucket_key_pair_from_string
from umobj.obj import Obj
from umobj.acl import split_acl, make_private
from umobj.options import umobj_parser


if __name__ == "__main__":
    umobj_init_keyboard_interrupt()

    description = 'Change Object - ' + \
                  'Modify Access Control lists for a set of buckets and/or keys'
    description_epilog = '''  POLICY      - username:ACL where ACL is one of
                FULL_CONTROL, READ, WRITE, READ_ACL, WRITE_ACL'''
    parser = umobj_parser(description=description,
                          description_epilog=description_epilog)
    parser.add_recursive(help='Recursively apply ACL to keys')
    parser.add_mode(choices=['add', 'remove', 'bucket', 'public', 'private', 'clear'], help='Mode of operation.  Specifying "clear" will create an empty ACL to be applied.  However, if you specify policies in the same command, the ACL will contain those policies.')
    parser.add_no_bucket_changes()
    parser.add_policy()
    parser.add_s3path(number=1)
    args = parser.parse_args()

    # setup logging
    if args.debug:
        logging_level = logging.DEBUG
    elif args.verbose:
        logging_level = logging.INFO
    else:
        logging_level = logging.WARNING
    umobj_logging(logging_level)

    logging.info("Running %s" % sys.argv)

    S3PATH = args.S3PATH
    recursive = args.recursive
    mode = args.mode
    public = mode == 'public'
    private = mode == 'private'
    no_bucket_changes = args.no_bucket_changes
    push_bucket_acls = mode == 'bucket'
    policies = args.policies

    # Bucket changes are only possible if the user does not not specify
    # --no-bucket-changes and also does not specify --push-bucket-acls.
    # Whether or not the bucket is included will also depend on whether or
    # not a key_prefix is present.
    bucket_changes_possible = not no_bucket_changes and not push_bucket_acls

    if not public and not private and not push_bucket_acls:
        if policies is None:
            logging.error('One or more ACL policies are required.')
            parser.print_help()
            sys.exit(1)

    if push_bucket_acls and no_bucket_changes:
        logging.warning('--no-bucket-changes cannot possibly have any ' +
                        'effect when pushing bucket ACLs.')

    if not Obj.connect(host=args.host,
                       port=args.port,
                       access_key=args.access_key,
                       secret_key=args.secret_key):
        logging.error('Unable to contact object store.')
        sys.exit(1)

    if len(S3PATH) == 0:
        parser.print_help()
        sys.exit(1)

    for bucket_name in S3PATH:
        bucket_name, key_name_prefix = \
            umobj_get_bucket_key_pair_from_string(bucket_name)
        try:
            bucket = Obj.conn.get_bucket(bucket_name)
        except boto.exception.S3ResponseError, e:
            logging.error("Can not access bucket %s, %s." %
                          (bucket_name, e.error_code))
            continue

        # get objects that we are targeting
        objects = []
        if key_name_prefix:
            for key in bucket.list(prefix=key_name_prefix):
                objects.append(key)
        else:
            if bucket_changes_possible:
                objects.append(bucket)
            if recursive:
                for key in bucket.get_all_keys():
                    objects.append(key)

        if push_bucket_acls:
            bucket_policy = bucket.get_acl()

        for object in objects:
            if public:
                logging.debug('Making %s public' % object.name)
                object.make_public()
            elif private:
                logging.debug('Making %s private' % object.name)
                make_private(object)
            elif push_bucket_acls:
                logging.debug('Pushing bucket acls to %s' % object.name)
                object.set_acl(bucket_policy)
            else:
                policy = object.get_acl()
                if mode == 'add':
                    for p in policies:
                        u, g = split_acl(p)
                        policy.acl.add_user_grant(g, u)
                elif mode == 'remove':
                    grants = []
                    for grant in policy.acl.grants:
                        for p in policies:
                            u, g = split_acl(p)
                            if grant.permission != g or grant.id != u:
                                grants.append(grant)
                    policy.acl.grants = grants
                elif mode == 'clear':
                    acl = ACL()
                    for p in policies:
                        u, g = split_acl(p)
                        acl.add_user_grant(g, u)
                    policy.acl = acl

                try:
                    object.set_acl(policy)
                except boto.exception.S3ResponseError:
                    pass
