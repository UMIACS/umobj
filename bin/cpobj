#!/usr/bin/env python

import os
import sys
import logging
import boto.s3

from umobj.utils import umobj_logging, umobj_init_keyboard_interrupt, \
    umobj_get_bucket_key_pair_from_string
from umobj.transfer import obj_upload, obj_download
from umobj.obj import Obj
from umobj.options import umobj_parser

pbar = None


def usage():
    prog_name = os.path.basename(sys.argv[0])
    usage_string = """
NAME
    %s - Copy files to and from an S3 compatible object store

SYNOPSIS
    %s [OPTION]... SRC [SRC]+ BUCKET[:DEST]

    %s [OPTION]... BUCKET[:SRC] DEST

OPTIONS SUMMARY

    -a, --access_key <access_key>  Object store access key
    -s, --secret_key <secret_key>  Object store secret key
    -S, --server <server>          Object store server name
    -P, --port <port>              Object store server port [Default: 443]
    -m, --multipart                Instantiate multipart transfer [Default: no]
    -r, --recursive                Copy files recursively [Default: no]
    -f, --force                    Force overwrite files in download mode
    -V, --verbose                  Verbose mode
        --version                  Print version
    -D, --debug                    Debug mode
    -h, --help

OPTIONS
    access_key  - Your Access Key ID.  If not supplied, boto will
                  use the value of the environment variable OBJ_ACCESS_KEY_ID.
    secret_key  - Your Secret Access Key.  If not supplied, will use the value
                  of the environment variable OBJ_SECRET_ACCESS_KEY.
    server      - The object storage server you want to connect to.  This can
                  be overridden by the OBJ_SERVER environment variable.
    BUCKET      - The bucket that is to be used for this copy operation.  This
                  is necessary on one and only one of the SRC and DEST
                  arguments.
    SRC         - Local file system directory/file or object store key.  A
                  directory is allowed for uploads if recursive is turned on,
                  and is allowed for download.
    DEST        - Local file system directory/file or object store key.  A
                  directory is allowed for downloads.

""" % (prog_name, prog_name, prog_name)
    print usage_string
    sys.exit()


if __name__ == "__main__":

    umobj_init_keyboard_interrupt()

    description = 'Copy Object(s) - ' + \
                  'Copy objects to and from object store'
    parser = umobj_parser(description=description)
    parser.add_recursive(help='Copy files recursively')
    parser.add_force(help='Force overwrite files when downloading')
    parser.add_multipart()
    parser.add_s3path(name='SOURCE', number=1,
                      help='BUCKET[:SRC] or SRC')
    parser.add_s3path(name='DESTINATION', number=1,
                      help='DEST or BUCKET[:DEST]')
    args = parser.parse_args()
    ## setup logging
    if args.debug:
        logging_level = logging.DEBUG
    elif args.verbose:
        logging_level = logging.INFO
    else:
        logging_level = logging.WARNING
    umobj_logging(logging_level)

    logging.info("Running %s" % sys.argv)

    if not Obj.connect(host=args.host,
                       port=args.port,
                       access_key=args.access_key,
                       secret_key=args.secret_key):
        logging.error('Unable to contact object store.')
        sys.exit(1)

    src = args.SOURCE[0]
    dest = args.DESTINATION[0]
    upload = False
    download = False
    src_bucket_name, src_key_name = \
        umobj_get_bucket_key_pair_from_string(src)
    dest_bucket_name, dest_key_name = \
        umobj_get_bucket_key_pair_from_string(dest)
    logging.debug("SRC Bucket Name: %s" % src_bucket_name)
    logging.debug("SRC Key Name: %s" % src_key_name)
    logging.debug("DEST Bucket Name: %s" % dest_bucket_name)
    logging.debug("DEST Key Name: %s" % dest_key_name)

    if ':' in dest:
        if ':' in src:
            if not os.path.exists(src):
                logging.error("Can not copy from a bucket to a bucket.")
                parser.print_help()
                sys.exit(1)
        bucket_name = dest_bucket_name
        dest_name = dest_key_name
        upload = True
        logging.info("Upload mode with bucket %s" % bucket_name)
        if dest_name:
            logging.info("Uploading to the prefix %s." % dest_name)
        logging.info("Uploading files %s." % src)
    else:
        if ':' in src:
            bucket_name = src_bucket_name
            key_name = src_key_name
            download = True
            logging.info("Download mode with bucket %s." % bucket_name)
            if key_name:
                logging.info("Downloading with the key name/prefix %s." %
                             key_name)
            logging.info("Downloading to the local directory %s." % dest)
        else:
            logging.error("You need to provide a bucket in either SRC " +
                          "or DEST.")
            parser.print_help()
            sys.exit(1)

    try:
        bucket = Obj.conn.get_bucket(bucket_name)
    except boto.exception.S3ResponseError, e:
        logging.error("Unable to access bucket %s, %s." %
                      (bucket_name, e.error_code))
        sys.exit(1)

    if upload:
        obj_upload(bucket_name, src, dest_name, args.recursive,
                       args.multipart)
    if download:
        obj_download(bucket_name, dest, key_name, args.force, args.recursive,
                     args.multipart)
