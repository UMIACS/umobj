#!/usr/bin/env python

import boto
from boto.s3.connection import S3Connection
from boto.s3.connection import OrdinaryCallingFormat
import sys
import os
import re
import logging

## Load our local library functions
sys.path.insert(0, "%s/../lib" % os.path.dirname(sys.argv[0]))
from umobj_utils import umobj_logging, umobj_init_keyboard_interrupt

usage_string = """
SYNOPSIS
   mvobj [-a/--access_key <access_key>] [-s/--secret_key <secret_key>]
         [-S/--server <server>] [-P/--port <port>] [-h/--help]
         [-V/--verbose] [-D/--debug]
         SRC_BUCKET:PATH DEST_BUCKET:PATH

   Where
        access_key  - Your Access Key ID.  If not supplied, mkobj will
                      use the value of the environment variable
                      OBJ_ACCESS_KEY_ID
        secret_key  - Your Secret Access Key.  If not supplied, boto
                      will use the value of the environment variable
                      OBJ_SECRET_ACCESS_KEY
        SRC_BUCKET  - The name of the bucket to copy from.
        DEST_BUCKET - The name of the bucket to copy to.
        PATH        - The key name inside the bucket.
"""


def usage():
    print usage_string
    sys.exit()


if __name__ == "__main__":
    import getopt

    umobj_init_keyboard_interrupt()

    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   'a:s:S:P:hRDV',
                                   ['access_key=', 'secret_key=',
                                    'server=', 'port=', 'help',
                                    'debug', 'verbose'])
    except getopt.GetoptError, err:
        print str(err)  # will print something like "option -a not recognized"
        usage()

    access_key = None
    secret_key = None
    level = logging.WARNING
    try:
        server = os.environ['OBJ_SERVER']
    except:
        server = 'obj.umiacs.umd.edu'
    port = 443

    for o, a in opts:
        if o in ('-h', '--help'):
            usage()
            sys.exit()
        if o in ('-a', '--access_key'):
            access_key = a
        if o in ('-s', '--secret_key'):
            secret_key = a
        if o in ('-S', '--server'):
            server = a
        if o in ('-P', '--port'):
            port = a
        if o in ('-V', '--verbose'):
            level = logging.INFO
        if o in ('-D', '--debug'):
            level = logging.DEBUG

    umobj_logging(level)

    if access_key is None:
        try:
            access_key = os.environ['OBJ_ACCESS_KEY_ID']
        except:
            logging.error("Please provide access_key")
            usage()
    if secret_key is None:
        try:
            secret_key = os.environ['OBJ_SECRET_ACCESS_KEY']
        except:
            logging.error("Please provide secret_key")
            usage()

    obj = S3Connection(host=server,
                       port=port,
                       is_secure=True,
                       aws_access_key_id=access_key,
                       aws_secret_access_key=secret_key,
                       calling_format=OrdinaryCallingFormat())

    if len(args) != 2:
        logging.error("Please provide the correct number of arguments")
        usage()

    src = args[0]
    dest = args[-1]
    src_match = re.match('([\w\.\-]+):([\w\.\-\/]+)', src)
    dest_match = re.match('([\w\.\-]+):([\w\.\-\/]+)', dest)

    if src_match and dest_match:
        src_bucket_name = src_match.group(1)
        src_key_name = src_match.group(2)
        dest_bucket_name = dest_match.group(1)
        dest_key_name = dest_match.group(2)

        try:
            dest_bucket = obj.get_bucket(dest_bucket_name)
        except boto.exception.S3ResponseError, e:
            logging.error("Cannot access bucket %s, %s." %
                          (dest_bucket_name, e.error_code))
            sys.exit(1)
        try:
            dest_bucket.copy_key(dest_key_name, src_bucket_name, src_key_name,
                                 preserve_acl=True)
            logging.info("Copied %s:%s to %s:%s" %
                         (src_bucket_name, src_key_name,
                          dest_bucket_name, dest_key_name))
            # be very sure that the object copied before we delete the original
            obj.get_bucket(src_bucket_name).get_key(src_key_name).delete()
        except boto.exception.S3ResponseError, e:
            logging.error("SRC %s:%s does not exist" %
                          (src_bucket_name, src_key_name))
        except NameError, e:
            logging.error("DEST bucket %s does not exist" % dest_bucket_name)
        except boto.exception.BotoClientError, e:
            logging.error("Failed to copy %s:%s to %s:%s" %
                          (src_bucket_name, src_key_name,
                           dest_bucket_name, dest_key_name))
    else:
        logging.error("You need to provide a bucket and key in both the SRC " +
                      "and the DEST.")
        usage()
