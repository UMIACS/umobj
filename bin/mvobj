#!/usr/bin/env python

import boto
import sys
import os
import logging

## Load our local library functions
sys.path.insert(0, "%s/.." % os.path.dirname(sys.argv[0]))
import umobj
from umobj.utils import umobj_logging, umobj_init_keyboard_interrupt, \
    umobj_get_bucket_key_pair_from_string
from umobj.obj import Obj
from umobj.options import umobj_parser


if __name__ == "__main__":
    import getopt

    umobj_init_keyboard_interrupt()

    usage = 'Usage: %prog [OPTION] SRC_BUCKET:PATH DEST_BUCKET:PATH'
    description = 'Move Bucket(s) - Move objects between buckets'
    parser = umobj_parser(usage=usage, description=description)
    (options, args) = parser.parse_args()
    ## setup logging
    if options.debug:
        logging_level = logging.DEBUG
    elif options.verbose:
        logging_level = logging.INFO
    else:
        logging_level = logging.WARNING
    umobj_logging(logging_level)

    logging.info("Running %s" % sys.argv)

    if not Obj.connect(host=options.host,
                       port=options.port,
                       access_key=options.access_key,
                       secret_key=options.secret_key):
        logging.error('Unable to contact object store.')
        sys.exit(1)

    if len(args) != 2:
        logging.error("Please provide the source and destination")
        parser.print_help()
        sys.exit(1)

    src_bucket_name, src_key_name = \
        umobj_get_bucket_key_pair_from_string(args[0])
    dest_bucket_name, dest_key_name = \
        umobj_get_bucket_key_pair_from_string(args[1])

    if src_bucket_name and src_key_name and dest_bucket_name and dest_key_name:
        try:
            dest_bucket = Obj.conn.get_bucket(dest_bucket_name)
        except boto.exception.S3ResponseError, e:
            logging.error("Cannot access bucket %s, %s." %
                          (dest_bucket_name, e.error_code))
            sys.exit(1)
        try:
            dest_bucket.copy_key(dest_key_name, src_bucket_name, src_key_name,
                                 preserve_acl=True)
            logging.info("Copied %s:%s to %s:%s" %
                         (src_bucket_name, src_key_name,
                          dest_bucket_name, dest_key_name))
            # be very sure that the object copied before we delete the original
            Obj.conn.get_bucket(src_bucket_name).get_key(src_key_name).delete()
        except boto.exception.S3ResponseError, e:
            logging.error("SRC %s:%s does not exist" %
                          (src_bucket_name, src_key_name))
        except NameError, e:
            logging.error("DEST bucket %s does not exist" % dest_bucket_name)
        except boto.exception.BotoClientError, e:
            logging.error("Failed to copy %s:%s to %s:%s" %
                          (src_bucket_name, src_key_name,
                           dest_bucket_name, dest_key_name))
    else:
        logging.error("You need to provide a bucket and key in both the SRC " +
                      "and the DEST.")
        parser.print_help()
        sys.exit(1)
