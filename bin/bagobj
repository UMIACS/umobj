#!/usr/bin/env python

import os
import sys
import logging
import boto.s3
import bagit
from umobj.utils import umobj_logging, umobj_init_keyboard_interrupt, \
    umobj_get_bucket_key_pair_from_string
from umobj.verify import load_bag_checksums
from umobj.transfer import obj_upload, obj_download, obj_key
from umobj.obj import Obj
from umobj.options import umobj_parser
from qav.questions import Question, QuestionSet
from qav.validators import EmailValidator

pbar = None

def diff(a, b):
    b = set(b)
    return [aa for aa in a if aa not in b]

if __name__ == "__main__":

    umobj_init_keyboard_interrupt()

    description = 'BagIt'
    parser = umobj_parser(description=description)
    parser.add_multipart()
    parser.add_s3path(name='SOURCE', number=1,
                      help='Source Directory')
    parser.add_s3path(name='DESTINATION', number=1,
                      help='Destination Bucket')
    args = parser.parse_args()
    ## setup logging
    if args.debug:
        logging_level = logging.DEBUG
    elif args.verbose:
        logging_level = logging.INFO
    else:
        logging_level = logging.WARNING
    umobj_logging(logging_level)

    logging.info("Running %s" % sys.argv)

    if not Obj.connect(host=args.host,
                       port=args.port,
                       access_key=args.access_key,
                       secret_key=args.secret_key):
        logging.error('Unable to contact object store.')
        sys.exit(1)

    src = args.SOURCE[0]
    dest = args.DESTINATION[0]
    dest_bucket_name, dest_key_name = \
        umobj_get_bucket_key_pair_from_string(dest)
    logging.debug("DEST Bucket Name: %s" % dest_bucket_name)
    logging.debug("DEST Key Name: %s" % dest_key_name)
    bucket_name = dest_bucket_name

    try:
        bucket = Obj.conn.get_bucket(bucket_name)
    except boto.exception.S3ResponseError, e:
        logging.error("Unable to access bucket %s, %s." %
                      (bucket_name, e.error_code))
        sys.exit(1)

    try:
        bag = bagit.Bag(src)
        logging.info('Bag %s already exists; not rebaging.' % src)
    except bagit.BagError:
        qset = QuestionSet()
        qset.add(Question('Contact Name', 'Contact-Name'))
        qset.add(Question('Contact Email', 'Contact-Email', EmailValidator()))
        qset.add(Question('Description', 'External-Description'))

        qset.ask()
        answers = qset.answers
        logging.info('bag_info %s' % answers)
        bag = bagit.make_bag(src, answers)

    basename = os.path.basename(os.path.abspath('src'))

    if dest_key_name is None:
        key_path = src.split(os.sep)[-1]
    else:
        key_path = '%s/%s' % (dest_key_name, src.split(os.sep)[-1])

    bagit_txt = obj_key(bucket_name, '%s/bagit.txt' % key_path)
    if bagit_txt is not None:
        obj_entries = load_bag_checksums(bucket_name, key_path)
        if cmp(obj_entries, bag.entries) != 0:
            logging.error('Conflict between manifest in filesystem and ' + \
                          'object store.  Please remove or rename the bag ' + \
                          'in the object store before trying to continue.')
            sys.exit(1)
        logging.info('Bag is already uploaded.  You can do a full ' + \
                     'validation with the cmpobj command.')
    else:
        obj_upload(bucket_name, src, dest_key_name, True, args.multipart)
        print 'Bag successfully uploaded to object store.'
        print 'Please verify the content and, when confident, you may ' + \
              'remove the local ' + \
              'filesystem directory: %s.' % os.path.abspath(src)
